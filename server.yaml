---
apiVersion: v1
kind: Namespace
metadata:
  name: jt-namespace
  labels:
    elbv2.k8s.aws/pod-readiness-gate-inject: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jt-server
  namespace: jt-namespace
spec:
  selector:
    matchLabels:
      app: jt-server
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0%       # how many pods we can add at a time
      maxUnavailable: 25%  # maxUnavailable define how many pods can be unavailable during the rolling update    
  template:
    metadata:
      labels:
        app: jt-server
    spec:
      nodeSelector:
        app: kb-prd-ng-adm
      containers:
      - name: jt-server
        image: 239234376445.dkr.ecr.ap-northeast-2.amazonaws.com/jt:47
        ports:
        - containerPort: 80
        env:
          # Define the environment variable
          - name: MYSQL_ENDPOINT # Notice that the case is different here
                                      # from the key name in the ConfigMap.
            valueFrom:
              configMapKeyRef:
                name: jt-config           # The ConfigMap this value comes from.
                key: MYSQL_ENDPOINT # The key to fetch.
      terminationGracePeriodSeconds: 300
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: jt-config
            # An array of keys from the ConfigMap to create as files
            items:
            - key: "game.properties"
              path: "game.properties"
            - key: "user-interface.properties"
              path: "user-interface.properties"
...
